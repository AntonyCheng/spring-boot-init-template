version: '3'

services:

#########################################################################
############################以下是必须启动容器##############################
#########################################################################
  mysql:
    image: mysql:8.0.39
    container_name: mysql
    environment:
      # 时区上海
      TZ: Asia/Shanghai
      # root 密码
      MYSQL_ROOT_PASSWORD: 123456
      # 初始化数据库
      MYSQL_DATABASE: init_db
    ports:
      - "3306:3306"
    volumes:
      # 数据挂载
      - ./data/mysql/data/:/var/lib/mysql/
      # 配置挂载
      - ./data/mysql/conf/:/etc/mysql/conf.d/
    command:
      # 将mysql8.0默认密码策略修改为"原生"策略 (mysql8.0对其默认策略做了更改，会导致密码无法匹配)
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --explicit_defaults_for_timestamp=true
      --lower_case_table_names=1
      --skip-name-resolve
    privileged: true
    networks:
      docker_net:
        ipv4_address: 177.177.177.100

#########################################################################
############################以下是选择启动容器##############################
#########################################################################
###########################   PostgreSQL   ##############################
#  postgresql:
#    image: pgvector/pgvector:0.7.4-pg17
#    container_name: postgresql
#    environment:
#      POSTGRES_USER: root
#      POSTGRES_PASSWORD: 123456
#      POSTGRES_DB: init_db
#    ports:
#      - "5432:5432"
#    volumes:
#      - ./data/postgresql/data/:/var/lib/postgresql/data/
#    privileged: true
#    networks:
#      docker_net:
#        ipv4_address: 177.177.177.101
#
############################   Redis   ###############################
#  redis:
#    image: redis:7.4.1
#    container_name: redis
#    ports:
#      - "6379:6379"
#    environment:
#      # 时区上海
#      TZ: Asia/Shanghai
#    volumes:
#      # 配置文件
#      - ./data/redis/conf/:/redis/config/
#      # 挂载目录
#      - ./data/redis/data/:/redis/data/
#    command: "redis-server /redis/config/redis.conf"
#    privileged: true
#    networks:
#      docker_net:
#        ipv4_address: 177.177.177.102
#
############################   MinIO   ###############################
#  minio:
#    image: minio/minio:RELEASE.2024-09-13T20-26-02Z
#    container_name: minio
#    ports:
#      # api 端口
#      - "9000:9000"
#      # 控制台端口
#      - "9090:9090"
#    environment:
#      # 时区上海
#      TZ: Asia/Shanghai
#      # 管理后台用户名
#      MINIO_ROOT_USER: minioadmin
#      # 管理后台密码，最小8个字符
#      MINIO_ROOT_PASSWORD: minioadmin
#      # https需要指定域名
#      #MINIO_SERVER_URL: "https://xxx.com:9000"
#      #MINIO_BROWSER_REDIRECT_URL: "https://xxx.com:9090"
#      # 开启压缩 on 开启 off 关闭
#      MINIO_COMPRESS: "off"
#      # 扩展名 .pdf,.doc 为空 所有类型均压缩
#      MINIO_COMPRESS_EXTENSIONS: ""
#      # mime 类型 application/pdf 为空 所有类型均压缩
#      MINIO_COMPRESS_MIME_TYPES: ""
#    volumes:
#      # 映射当前目录下的data目录至容器内/data目录
#      - ./data/minio/data/:/data/
#      # 映射配置目录
#      - ./data/minio/config/:/root/.minio/
#    command: server --address ':9000' --console-address ':9090' /data  # 指定容器中的目录 /data
#    privileged: true
#    networks:
#      docker_net:
#        ipv4_address: 177.177.177.103
#
###########################   RabbitMQ   #############################
#  rabbitmq:
#    image: rabbitmq:3.13.7-management
#    container_name: rabbitmq
#    # 指定docker build时Dockerfile的路径
#    build:
#      context: ./rabbitmq
#    environment:
#      RABBITMQ_DEFAULT_USER: admin
#      RABBITMQ_DEFAULT_PASS: admin123
#    ports:
#      - "15672:15672" # 管理界面端口
#      - "5672:5672"   # api 端口
#    volumes:
#      - ./data/rabbitmq/log/:/var/log/rabbitmq/
#      - ./data/rabbitmq/data/:/var/lib/rabbitmq/
#    privileged: true
#    networks:
#      docker_net:
#        ipv4_address: 177.177.177.104
#
##############################   ELK   ################################
#  elasticsearch:
#    image: elasticsearch:7.14.0
#    container_name: elasticsearch
#    ports:
#      - "9200:9200"
#      - "9300:9300"
#    environment:
#      # 设置集群名称
#      cluster.name: elasticsearch
#      # 以单一节点模式启动
#      discovery.type: single-node
#      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
#    volumes:
#      - ./data/elk/elasticsearch/plugins:/usr/share/elasticsearch/plugins
#      - ./data/elk/elasticsearch/data:/usr/share/elasticsearch/data
#      - ./data/elk/elasticsearch/logs:/usr/share/elasticsearch/logs
#    privileged: true
#    networks:
#      docker_net:
#        ipv4_address: 177.177.177.105
#
#  logstash:
#    image: logstash:7.14.0
#    container_name: logstash
#    ports:
#      - "4560:4560"
#    volumes:
#      - ./data/elk/logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
#      - ./data/elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
#    depends_on:
#      # logstash在elasticsearch启动之后再启动
#      - elasticsearch
#    privileged: true
#    networks:
#      docker_net:
#        ipv4_address: 177.177.177.106
#
#  kibana:
#    image: kibana:7.14.0
#    container_name: kibana
#    ports:
#      - "5601:5601"
#    depends_on:
#      # kibana在elasticsearch启动之后再启动
#      - elasticsearch
#    environment:
#      #设置系统语言文中文
#      I18N_LOCALE: zh-CN
#      # 访问域名
#      # SERVER_PUBLICBASEURL: https://kibana.cloud.com
#    volumes:
#      - ./data/elk/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
#    privileged: true
#    networks:
#      docker_net:
#        ipv4_address: 177.177.177.107
#
############################   MongoDB   ##############################
#  mongodb:
#    image: mongodb/mongodb-community-server:7.0.12-ubi8
#    container_name: mongodb
#    ports:
#      - "27017:27017"
#    volumes:
#      - ./data/mongodb/data/:/data/db/
#    environment:
#      - MONGODB_INITDB_ROOT_USERNAME=root
#      - MONGODB_INITDB_ROOT_PASSWORD=123456
#    privileged: true
#    networks:
#      docker_net:
#        ipv4_address: 177.177.177.108
#
#############################   Ollama   ##############################
#  ollama:
#    image: ollama/ollama:0.3.11
#    container_name: ollama
#    ports:
#      - "11434:11434"
#    volumes:
#      - ./data/ollama/data:/root/.ollama
#    privileged: true
#    networks:
#      docker_net:
#        ipv4_address: 177.177.177.109
#
#############################   NewAPI   ##############################
#  newapi:
#    image: calciumion/new-api:v0.6.7.1
#    container_name: newapi
#    ports:
#      - "3000:3000"
#    environment:
#      TZ: Asia/Shanghai
#    volumes:
#      - ./data/newapi/data/one-api.db:/data/one-api.db
#    command: "sh -c ./one-api --port 3000 --log-dir ./logs"
#    privileged: true
#    networks:
#      docker_net:
#        ipv4_address: 177.177.177.110
#
##############################   m3e   ################################
#  m3e:
#    image: stawky/m3e-large-api:latest
#    container_name: m3e
#    ports:
#      - "6008:6008"
#    command: "sh -c 'cd /app && uvicorn localembedding:app --host 0.0.0.0 --port 6008'"
#    #如果需要英伟达GPU，使用nvidia-smi命令查看后进行配置：
#    #deploy:
#    #  resources:
#    #    reservations:
#    #      devices:
#    #      - driver: nvidia
#    #        device_ids: ['0']
#    #        capabilities: [gpu]
#    privileged: true
#    networks:
#      docker_net:
#        ipv4_address: 177.177.177.111
#
############################   Milvus   ###############################
#  milvus-etcd:
#    container_name: milvus-etcd
#    image: quay.io/coreos/etcd:v3.5.18
#    environment:
#      TZ: Asia/Shanghai
#      ETCD_AUTO_COMPACTION_MODE: revision
#      ETCD_AUTO_COMPACTION_RETENTION: 1000
#      ETCD_QUOTA_BACKEND_BYTES: 4294967296
#      ETCD_SNAPSHOT_COUNT: 50000
#    volumes:
#      - ./data/milvus/etcd:/etcd
#    command: etcd -advertise-client-urls=http://177.177.177.112:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
#    healthcheck:
#      test: ["CMD", "etcdctl", "endpoint", "health"]
#      interval: 30s
#      timeout: 20s
#      retries: 3
#    privileged: true
#    networks:
#      docker_net:
#        ipv4_address: 177.177.177.112
#
#  milvus-minio:
#    container_name: milvus-minio
#    image: minio/minio:RELEASE.2024-09-13T20-26-02Z
#    environment:
#      TZ: Asia/Shanghai
#      MINIO_ACCESS_KEY: minioadmin
#      MINIO_SECRET_KEY: minioadmin
#    volumes:
#      - ./data/milvus/minio:/minio_data
#    command: minio server /minio_data --console-address ":9001"
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
#      interval: 30s
#      timeout: 20s
#      retries: 3
#    privileged: true
#    networks:
#      docker_net:
#        ipv4_address: 177.177.177.113
#
#  milvus-standalone:
#    container_name: milvus-standalone
#    image: milvusdb/milvus:v2.5.10
#    command: ["milvus", "run", "standalone"]
#    security_opt:
#      - seccomp:unconfined
#    environment:
#      TZ: Asia/Shanghai
#      ETCD_ENDPOINTS: 177.177.177.112:2379
#      MINIO_ADDRESS: 177.177.177.113:9000
#    volumes:
#      - ./data/milvus/data:/var/lib/milvus
#      - ./data/milvus/milvus.yaml:/milvus/configs/milvus.yaml
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
#      interval: 30s
#      timeout: 20s
#      retries: 3
#    ports:
#      - "19530:19530"
#      - "9091:9091"
#    depends_on:
#      - "milvus-etcd"
#      - "milvus-minio"
#    privileged: true
#    networks:
#      docker_net:
#        ipv4_address: 177.177.177.114
networks:
  docker_net:
    external: true