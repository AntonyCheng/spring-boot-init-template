# 不配置默认单机
mode:
  # 运行模式类型。可选配置：Standalone、Cluster
  type: Standalone
  repository:
    # 持久化仓库类型
    type: JDBC
# todo 修改MySQL配置
dataSources:
  master:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://xxx.xxx.xxx.xxx:23305/init_db?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowPublicKeyRetrieval=true&rewriteBatchedStatements=true
    username: root
    password: 123456
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 600000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 25
    minPoolSize: 10
#  # 从库在需要时开启
#  slave:
#    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
#    driverClassName: com.mysql.cj.jdbc.Driver
#    url: jdbc:mysql://xxx.xxx.xxx.xxx:23307/init_db?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowPublicKeyRetrieval=true&rewriteBatchedStatements=true
#    username: root
#    password: 123456
#    connectionTimeoutMilliseconds: 30000
#    idleTimeoutMilliseconds: 600000
#    maxLifetimeMilliseconds: 1800000
#    maxPoolSize: 25
#    minPoolSize: 10
props:
  # 显示SQL
  sql-show: true
  # 开启简单SQL显示模式
  sql-simple: true
rules:
  # 数据加密
  - !ENCRYPT
    # 首先定义加密算法
    encryptors:
      # MD5加密算法
      MD5:
        type: MD5
        props:
          salt: salt
    tables:
      # 加密user表中的数据
      t_user:
        columns:
          # 加密密码
          user_password:
            cipherColumn: user_password
            encryptorName: MD5
  # SQL解析
  - !SQL_PARSER
    # 是否解析SQL注释
    sqlCommentParseEnabled: true
    # SQL语句本地缓存配置项
    sqlStatementCache:
      # 本地缓存初始容量
      initialCapacity: 2000
      # 本地缓存最大容量
      maximumSize: 65535
    # 解析树本地缓存配置项
    parseTreeCache:
      # 本地缓存初始容量
      initialCapacity: 128
      # 本地缓存最大容量
      maximumSize: 1024
# todo 以下都是示例，可以解除注释直接替换，但是由于框架配置复杂，这里建议按照格式重新写，保留样例以便于修改
#rules:
#  # 读写分离（从库开启后开启，使用之前务必请先理解读写分离和事务的关系，因为一旦在业务中使用的事务，那么读写操作都会只发生在主库）
#  - !READWRITE_SPLITTING
#    dataSources:
#      # 读写库配置名称（主库写，从库读，只允许一写多读）
#      readwrite_ds:
#        # 静态读写分离类型
#        staticStrategy:
#          writeDataSourceName: master
#          readDataSourceNames:
#            - slave
#        # 负载均衡算法名称
#        loadBalancerName: RANDOM
#    # 配置负载均衡算法
#    loadBalancers:
#      # 算法名称——随机负载均衡算法
#      RANDOM:
#        type: RANDOM
#        props:
#          transaction-read-query-strategy: FIXED_PRIMARY
#      # 算法名称——轮询负载均衡算法
#      ROUND_ROBIN:
#        type: ROUND_ROBIN
#        props:
#          transaction-read-query-strategy: FIXED_PRIMARY
#
#  # 数据加密（在需要时开启）
#  - !ENCRYPT
#    # 首先定义加密算法
#    encryptors:
#      # MD5加密算法
#      md5_encryptor:
#        type: MD5
#        props:
#          salt: salt
#      # AES加密算法
#      aes_encryptor:
#        type: AES
#        props:
#          aes-key-value: abcdefghijklmnopqrstuvwxyz
#      # RC4加密算法
#      rc4_encryptor:
#        type: RC4
#        props:
#          rc4-key-value: abcdefghijklmnopqrstuvwxyz
#      # 针对Like模糊查询的加密算法
#      like_encryptor:
#        type: CHAR_DIGEST_LIKE
#      # 除以上加密方法之外还支持SM3和SM4的加密，详情见：https://shardingsphere.apache.org/document/5.3.2/cn/user-manual/common-config/builtin-algorithm/encrypt/
#    # 涉及数据加密的表
#    tables:
#      # 表名
#      table_name:
#        columns:
#          # 列名——单向加密
#          md5_columns:
#            # 加密的列名
#            cipherColumn: md5_columns
#            # 加密的算法
#            encryptorName: md5_encryptor
#          # 列名——对称加密
#          aes_columns:
#            # 加密的列名
#            cipherColumn: aes_columns
#            # 加密的算法
#            encryptorName: aes_encryptor
#          # 列名——模糊查询字段加密
#          like_columns:
#            # 加密的列名
#            cipherColumn: like_columns
#            # 数据库中需要新建一个列名来保存模糊查询算法处理后的明文
#            likeQueryColumn: save_like_columns
#            likeQueryEncryptorName: like_encryptor
#
#  # 数据脱敏（在需要时开启，这个脱敏是数据库层的脱敏，使用一定要注意业务逻辑）
#  - !MASK
#    # 首先定义脱敏算法（）
#    maskAlgorithms:
#      # MD5 脱敏算法
#      MD5:
#        type: MD5
#        props:
#          salt: salt
#      # 保留前 N 后 M 脱敏算法
#      KEEP_FIRST_N_LAST_M:
#        type: KEEP_FIRST_N_LAST_M
#        props:
#          first-n: 1
#          last-m: 1
#          replace-char: "*"
#      # 保留自 X 至 Y 脱敏算法
#      KEEP_FROM_X_TO_Y:
#        type: KEEP_FROM_X_TO_Y
#        props:
#          from-x: 0
#          to-y: 0
#          replace-char: "*"
#      # 遮盖前 N 后 M 脱敏算法
#      MASK_FIRST_N_LAST_M:
#        type: MASK_FIRST_N_LAST_M
#        props:
#          first-n: 1
#          last-m: 1
#          replace-char: "*"
#      # 遮盖自 X 至 Y 脱敏算法
#      MASK_FROM_X_TO_Y:
#        type: MASK_FROM_X_TO_Y
#        props:
#          from-x: 0
#          to-y: 0
#          replace-char: "*"
#      # 除了上面脱敏算法，还有一些比较特殊的，详情见：https://shardingsphere.apache.org/document/5.3.2/cn/user-manual/common-config/builtin-algorithm/mask/
#    # 涉及到需要脱敏操作的表
#    tables:
#      # user表
#      t_user:
#        columns:
#          # 用户账号
#          user_account:
#            maskAlgorithm: KEEP_FROM_X_TO_Y
#
#  # SQL解析
#  - !SQL_PARSER
#    # 是否解析SQL注释
#    sqlCommentParseEnabled: true
#    # SQL语句本地缓存配置项
#    sqlStatementCache:
#      # 本地缓存初始容量
#      initialCapacity: 2000
#      # 本地缓存最大容量
#      maximumSize: 65535
#    # 解析树本地缓存配置项
#    parseTreeCache:
#      # 本地缓存初始容量
#      initialCapacity: 128
#      # 本地缓存最大容量
#      maximumSize: 1024